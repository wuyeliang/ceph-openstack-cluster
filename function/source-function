#!/bin/bash
# -*- coding: utf-8 -*-
# vim: tabstop=4 shiftwidth=4 softtabstop=4
#
unset http_proxy https_proxy ftp_proxy no_proxy 
if [ -e /root/admin-openrc.sh  ]
then
	source /root/admin-openrc.sh 
	fn_log "/root/admin-openrc.sh"
fi

function fn_set_conf () {
if [ -e /tmp/tmp ]
then
	log_info "/tmp/tmp is exist."
else
    log_error "/tmp/tmp is not exist"
    echo "/tmp/tmp is not exist"
    exit 1
fi
[ -f ${1}_bak ]  || cp -a $1 ${1}_bak
fn_log "[ -f ${1}_bak ]  || cp -a $1 ${1}_bak"
while  read LINE
do
	openstack-config --set  $1 $LINE
	fn_log "openstack-config --set  $1 $LINE"
done   < /tmp/tmp
rm -f /tmp/tmp
fn_log "/tmp/tmp"
}


function fn_create_project () {
PROJECT_NAME=`openstack project list |grep ${1} | awk -F "|" '{print$3}' | awk -F " " '{print$1}'`
if [  ${PROJECT_NAME}x = ${1}x ]
then
	log_info "openstack project ${1} have been created . "
else
	openstack project create --domain default   --description "${2}" ${1}
	fn_log "openstack project create --domain default   --description "${2}" ${1}"
fi

}
#eg:fn_create_project wyl "computer service "

function fn_create_user () {
openstack user show ${1} >/dev/null
if [ $?  -eq 0 ]
then
	log_info "openstack user ${1} have been  created. "
else
	openstack user create --domain default  ${1}  --password ${2}
	fn_log "openstack user create --domain default  ${1}  --password ${2}"
fi
}

#eg:fn_create_user wyl Changeme_123

function fn_create_role () {
openstack role show ${1} 2>/dev/null
if [ $? -eq  0 ]
then
	log_info "openstack role ${1} have ben created ."
else
	openstack role create ${1}
	fn_log "openstack role create ${1}"
fi
}
#eg:fn_create_user wyl


#create databases
function  fn_create_database () {
mysql -uroot -p${ALL_PASSWORD}  -e "use ${1};" 2>/dev/null
if [ $? -eq  0 ]
then
	log_info "${1} database have been installed."
else
	cp -a ${TOPDIR}/config/createdatabase.sql /tmp
    fn_log "cp -a $PWD/config/createdatabase.sql /tmp"
	sed -i "s/cinder/${1}/g" /tmp/createdatabase.sql
	fn_log "sed -i "s/cinder/${1}/g" /tmp/createdatabase.sql"
	sed -i "s/Changeme_123/${2}/g" /tmp/createdatabase.sql
	fn_log "sed -i "s/Changeme_123/${2}/g" /tmp/createdatabase.sql"
	mysql -uroot -p${2} < /tmp/createdatabase.sql
	fn_log "mysql -uroot -p${2} < /tmp/createdatabase.sql"
	rm -f /tmp/createdatabase.sql
	fn_log "rm -f /tmp/createdatabase.sql"
fi

}












#eg:fn_create_database wyl Changeme_123

function  fn_create_endpoint () {
ENDPOINT_LIST_INTERNAL=`openstack endpoint list   | grep ${2}  |grep internal | wc -l`
ENDPOINT_LIST_PUBLIC=`openstack endpoint list   | grep ${2}   |grep public | wc -l`
ENDPOINT_LIST_ADMIN=`openstack endpoint list   | grep ${2}   |grep admin | wc -l`
if [  ${ENDPOINT_LIST_INTERNAL}  -eq 1  ]  && [ ${ENDPOINT_LIST_PUBLIC}  -eq  1   ] &&  [ ${ENDPOINT_LIST_ADMIN} -eq 1  ]
then
	log_info "openstack endpoint create glance."
else
	openstack endpoint create --region RegionOne   ${1} public http://${MANAGER_IP}:${2}
	fn_log "openstack endpoint create --region RegionOne   ${1} public http://${MANAGER_IP}:${2}"
	openstack endpoint create --region RegionOne   ${1} internal http://${MANAGER_IP}:${2}
	fn_log "openstack endpoint create --region RegionOne   ${1} internal http://${MANAGER_IP}:${2}"
	openstack endpoint create --region RegionOne   ${1} admin http://${MANAGER_IP}:${2} 
	fn_log "openstack endpoint create --region RegionOne   ${1} admin http://${MANAGER_IP}:${2}"
	
fi
}

#fn_create_endpoint wyl 9090

function  fn_create_endpoint_version () {
ENDPOINT_LIST_INTERNAL=`openstack endpoint list  | grep ${3} | grep ${2}  |grep internal | wc -l`
ENDPOINT_LIST_PUBLIC=`openstack endpoint list  | grep ${3} | grep ${2}   |grep public | wc -l`
ENDPOINT_LIST_ADMIN=`openstack endpoint list  | grep ${3} | grep ${2}   |grep admin | wc -l`
if [  ${ENDPOINT_LIST_INTERNAL}  -eq 1  ]  && [ ${ENDPOINT_LIST_PUBLIC}  -eq  1   ] &&  [ ${ENDPOINT_LIST_ADMIN} -eq 1  ]
then
	log_info "openstack endpoint create glance."
else
	openstack endpoint create --region RegionOne   ${1} public http://${MANAGER_IP}:${2}/${3}/%\(tenant_id\)s
	fn_log "openstack endpoint create --region RegionOne   ${1} public http://${MANAGER_IP}:${2}/${3}/%\(tenant_id\)s"
	openstack endpoint create --region RegionOne   ${1} internal http://${MANAGER_IP}:${2}/${3}/%\(tenant_id\)s 
	fn_log "openstack endpoint create --region RegionOne   ${1} internal http://${MANAGER_IP}:${2}/${3}/%\(tenant_id\)s"
	openstack endpoint create --region RegionOne   ${1} admin http://${MANAGER_IP}:${2}/${3}/%\(tenant_id\)s 
	fn_log "openstack endpoint create --region RegionOne   ${1} admin http://${MANAGER_IP}:${2}/${3}/%\(tenant_id\)s"
	
fi
}
#fn_create_endpoint_version wyl 9090 v2

function  fn_create_service () {
openstack service show  ${1} >/dev/null
if [  $? -eq  0 ]
then 
	log_info "openstack service create ${1}."
else
	openstack service create --name ${1} --description "${2}" ${3}
	fn_log "openstack service create --name ${1} --description "${2}" ${3}"
fi
}
#fn_create_service nova "OpenStack Compute" compute
#openstack service create --name nova   --description "OpenStack Compute" compute

function fn_create_domain () {
openstack domain  show ${1} >/dev/null
if [ $? -eq  0 ]
then
	log_info "domain ${1} have been created."
else
	openstack domain create --description "${2}" ${1}
	fn_log "openstack domain create --description "${2}" ${1}"
fi
}
#eg: fn_create_domain "magnum Owns users and projects   created by magnum"


function  fn_create_endpoint_swift () {
ENDPOINT_LIST_INTERNAL=`openstack endpoint list  | grep ${3} | grep ${2}  |grep internal | wc -l`
ENDPOINT_LIST_PUBLIC=`openstack endpoint list  | grep ${3} | grep ${2}   |grep public | wc -l`
ENDPOINT_LIST_ADMIN=`openstack endpoint list  | grep ${3} | grep ${2}   |grep admin | wc -l`
if [  ${ENDPOINT_LIST_INTERNAL}  -eq 1  ]  && [ ${ENDPOINT_LIST_PUBLIC}  -eq  1   ] &&  [ ${ENDPOINT_LIST_ADMIN} -eq 1  ]
then
	log_info "openstack endpoint create glance."
else
	openstack endpoint create --region RegionOne   ${1} public http://${MANAGER_IP}:${2}/${3}/AUTH_%\(tenant_id\)s
	fn_log "openstack endpoint create --region RegionOne   ${1} public http://${MANAGER_IP}:${2}/${3}/AUTH_%\(tenant_id\)s"
	openstack endpoint create --region RegionOne   ${1} internal http://${MANAGER_IP}:${2}/${3}/AUTH_%\(tenant_id\)s 
	fn_log "openstack endpoint create --region RegionOne   ${1} internal http://${MANAGER_IP}:${2}/${3}/AUTH_%\(tenant_id\)s"
	openstack endpoint create --region RegionOne   ${1} admin http://${MANAGER_IP}:${2}/${3}/AUTH_%\(tenant_id\)s 
	fn_log "openstack endpoint create --region RegionOne   ${1} admin http://${MANAGER_IP}:${2}/${3}/AUTH_%\(tenant_id\)s"
	
fi
}
#fn_create_endpoint_swift wyl 9090 v2



